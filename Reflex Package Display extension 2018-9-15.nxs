{"name":"display extension","enabled":true,"description":"Exported reflexes: Display Extension","type":"group","id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":15,"code":"// Tael's display_notice extension\n//\n// Adds support for multi-chunk display notices.\n//\n// API:\n// display_notice(TEXT)\n//     Displays TEXT.\n// display_notice(TEXT, FG_COLOR)\n//     Displays TEXT in the color of FG_COLOR.\n//     Example of printing \"Oh no!\" in red:\n//         display_notice(\"Oh no!\", \"red\");\n// display_notice(TEXT, FG_COLOR, BG_COLOR)\n//     Displays TEXT in the colour of FG_COLOR on a BG_COLOR background.\n//     Note: Use \"\" for default colours.\n//     Example of printing \"Oh no!\" in red on blue:\n//         display_notice(\"Oh no!\", \"red\", \"blue\");\n//     Example of printing \"Oh no!\" in default text colour on blue:\n//         display_notice(\"Oh no!\", \"\", \"blue\");\n// display_notice(TEXT, FG_COLOR, BG_COLOR, TEXT2, FG_COLOR2, BG_COLOR2...)\n//     Displays TEXT in the colour of FG_COLOR on a BG_COLOR background followed by TEXT2 in the colour of FG_COLOR2 on a BG_COLOR background.\n//     Note: If the last FG_COLOR or BG_COLOR is unspecified or any FG_COLOR or BG_COLOR is \"\", the colours will be the last defined FG_COLOR or BG_COLOR (they will not revert to default colours).\n//     Note: Set FG_COLOR to \"reset\" to return text and background colour to default (accompanying BG_COLOR will be ignored). There is no way to revert text or background colour independently.\n//     Example of printing \"Oh no!\" in red on blue followed by \" Anything but that!\" in orange on green.\n//         display_notice(\"Oh no!\", \"red\", \"blue\", \" Anything but that!\", \"orange\", \"green\");\n//     Example of printing \"Oh no!\" in red on blue followed by \" Anything but that!\" in orange on blue.\n//         display_notice(\"Oh no!\", \"red\", \"blue\", \" Anything but that!\", \"orange\");\n//     Example of printing \"Oh no!\" in red on blue followed by \" Anything but that!\" in default colours.\n//         display_notice(\"Oh no!\", \"red\", \"blue\", \" Anything but that!\", \"reset\");\n//     Example of printing \"Oh no!\" in red on blue followed by \" Anything but that!\" in default text colour on blue:\n//         display_notice(\"Oh no!\", \"red\", \"blue\", \"\", \"reset\", \"\", \" Anything but that!\", \"\", \"blue\");\n//     Example of printing \"Oh no!\" in red on blue followed by \" Anything but that!\" in orange, then \" This is madness!\" in default colours, then \" Why?!\" in red.\n//         display_notice(\"Oh no!\", \"red\", \"blue\", \" Anything but that!\", \"orange\", \"\", \" This is madness!\", \"reset\", \"\", \" Why?!\", \"red\");\n\nclient.display_notice = function (...args) {\n    if (!args[0] || !args[0].length) {\n        if(args[0] !== \"\") { // some variables will send in \"\", just pretend we're formatting no text\n            return;\n        }\n    }\n    let bg;\n    let chunk = [];\n    let chunks = [];\n    let fg;\n    let text;\n    chunks.length = Math.ceil(args.length / 3);\n    chunks = chunks.fill().map((ignore, i) => args.slice(i * 3, i * 3 + 3));\n    chunks.forEach(function (e) {\n        text = e[0];\n        fg = e[1];\n        bg = e[2];\n        bg = client.convert_bgcolor(bg);\n        chunk.push(linechunk_color(fg, bg));\n        chunk.push(linechunk_text(text));\n    });\n    let line = {};\n    line.parsed_line = linechunks_create(chunk);\n    line.no_triggers = true;\n\n    if (client.current_block) {\n        let idx = client.current_block.length;\n        if (client.current_line) idx = client.current_block.indexOf(client.current_line) + 1;\n        client.current_block.splice(idx, 0, line);\n    } else {\n        let lines = [];\n        lines.push(line);\n        client.display_text_block(lines);\n    }\n};\n\nrun_function('promptOverride', {}, 'Display extension');\nrun_function('promptCreation', {}, 'Display extension');\nrun_function('def/aff got/lost', {}, 'Display extension');","items":[]},{"type":"function","name":"onGMCP","enabled":true,"id":18,"code":"//Enter the function here\n\nif (args.gmcp_method == \"Char.Vitals\") {\n    client.setPromptVitals(args.gmcp_args);\n}\n\nif (args.gmcp_method == \"Char.Defences.Add\") {\n    defGotEcho(args.gmcp_args.name);\n}\n\nif (args.gmcp_method == \"Char.Defences.Remove\") {\n    defLostEcho(args.gmcp_args[0]);\n}\n\nif (args.gmcp_method == \"Char.Afflictions.Add\") {\n    affGotEcho(args.gmcp_args.name);\n}\n\nif (args.gmcp_method == \"Char.Afflictions.Remove\") {\n    affLostEcho(args.gmcp_args[0]);\n    if (args.gmcp_args[0] == \"burning\")\n        delete GMCP.Afflictions[\"burning (1)\"];\n}"},{"type":"alias","name":"","enabled":true,"id":19,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\nset_variable('useCustomPrompt', client.prompt.custom);"},{"action":"function","fn":"onLoad"},{"action":"script","script":"//Enter the script here\nclient.prompt.custom = get_variable('useCustomPrompt');"}],"text":"loaddisplay"},{"type":"alias","name":"Toggle Custom Prompt","enabled":true,"id":20,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\nif (args[1] == \"on\")\n    client.prompt.custom = true;\nif (args[1] == \"off\")\n    client.prompt.custom = false;"}],"text":"^customprompt (on|off)$"},{"type":"alias","name":"","enabled":true,"id":23,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\nclient.prompt.vars.affString = \"\";"}],"text":"clearaffs"},{"type":"trigger","name":"Save useCustomPrompt","enabled":true,"id":21,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You grow still and begin to silently pray for preservation of your soul while you are out of the land.","actions":[{"action":"script","script":"//Enter the script here\nset_variable('useCustomPrompt', client.prompt.custom);\ngmcp_save_system(true);"}]},{"type":"function","name":"promptOverride","enabled":true,"id":16,"code":"//Enter the function here\n\nclient.get_formatted_prompt = function (...args) {\n    if (!args[0] || !args[0].length) {\n        if(args[0] !== \"\") { // some variables will send in \"\", just pretend we're formatting no text\n            return;\n        }\n    }\n    let bg;\n    let chunk = [];\n    let chunks = [];\n    let fg;\n    let text;\n    chunks.length = Math.ceil(args.length / 3);\n    chunks = chunks.fill().map((ignore, i) => args.slice(i * 3, i * 3 + 3));\n    chunks.forEach(function (e) {\n        text = e[0];\n        fg = e[1];\n        bg = e[2];\n        bg = client.convert_bgcolor(bg);\n        chunk.push(linechunk_color(fg, bg));\n        chunk.push(linechunk_text(text));\n    });\n    let line = {};\n    line.parsed_prompt = linechunks_create(chunk);\n    line.no_triggers = true;\n\n    return line;\n};\n\nclient.generate_text_block = function(lines) {\n    let customPromptEnabled = client.prompt.custom;\n    let count = 0;\n\n    let timestamp;\n    if (client.show_timestamp_milliseconds === true)\n        timestamp = client.getTimeMS();\n    else\n        timestamp = client.getTimeNoMS();\n    let cl = \"timestamp mono no_out\";\n    timestamp = \"<span class=\\\"\" + cl + \"\\\">\" + timestamp + \"&nbsp;</span>\";\n\n    let res = '';\n\n    let counter = 0;\n    for (let i = 0; i < lines.length; ++i) {\n        let txt = lines[i].parsed_line;\n        let font = lines[i].monospace ? 'mono' : '';\n        let line = \"<p class=\\\"\" + font + \"\\\">\" + timestamp + (txt ? txt.formatted() : '') + \"</p>\";\n\n        if (lines[i].gag) continue;\n        //////// Moved because don't want gagged lines\n        if (logging && txt) append_to_log(line);\n\n        //if (lines[i].gag) continue;\n        counter++;\n\n        if (txt) {\n            count++;\n            res += line;\n        }\n        let pr = lines[i].parsed_prompt;\n        if (pr && (count > 0)) {   // no prompt if we gagged everything\n\n            //////// Added\n            if(customPromptEnabled) {\n                lines[i] = client.prompt.getCustomPrompt();\n                pr = lines[i].parsed_prompt;\n            }\n            line = \"<p class=\\\"prompt \" + font + \"\\\">\" + timestamp + pr.formatted() + \"</p>\";\n            if (logging) append_to_log(line);\n            res += line;\n        }\n        // empty line - include it if it's neither the first nor the last one\n        // using \"counter\" instead of \"i\" fixes problems where the empty line is included after channel markers and such\n        if ((!pr) && (!txt) && (counter > 1) && (i < lines.length - 1)) {\n            res += '<p>' + timestamp + '&nbsp;' + '</p>';\n        }\n    }\n    if (client.extra_break && res.length) res += \"<br />\";\n\n    return res;\n};"},{"type":"function","name":"promptCreation","enabled":true,"id":17,"code":"//Enter the function here\n\nclient.prompt = client.prompt || {};\n\nclient.prompt.custom = false || get_variable('useCustomPrompt');\n\nclient.prompt.getCustomPrompt = function() {\n    let vars = client.prompt.vars;\n    let diffh = vars.diffh;\n    let diffm = vars.diffm;\n\n    vars.diffh = \"\";\n    vars.diffm = \"\";\n    vars.affString = \"\";\n    \n    setPromptDefs();\n    setPromptAffs();\n    setPromptBals();\n\n    if(GMCP.hasOwnProperty('blackout')) {\n        return client.get_formatted_prompt('-', \"reset\", \"\");\n    }\n\n    return client.get_formatted_prompt(\n        vars.aeon + \"\", \"red\", \"\",\n        vars.retard + \"\", \"blue\", \"\",\n        \"[\", \"purple\", \"\",\n        vars.h + \" \", vars.hcolor, \"\",\n        \"(\" + vars.pm + \")\", vars.mcolor, \"\",\n        \"] \", \"purple\", \"\",\n        vars.eq + vars.bal + \"|\", \"reset\", \"\",\n        vars.c + vars.k + vars.d + vars.b + \" \", \"reset\", \"\",\n        //vars.stance + \" \", \"white\", \"\",\n        \"[\", \"olive\", \"\",\n        vars.skullFracs, fractureColours(vars.skullFracs), \"\",\n        \"|\", \"olive\", \"\",\n        vars.torsoFracs, fractureColours(vars.torsoFracs), \"\",\n        \"|\", \"olive\", \"\",\n        vars.wristFracs, fractureColours(vars.wristFracs), \"\",\n        \"|\", \"olive\", \"\",\n        vars.legFracs, fractureColours(vars.legFracs), \"\",\n        \"|\", \"olive\", \"\",\n        vars.parrying, vars.parrycolor, \"\",\n        \"] \", \"olive\", \"\", \n        vars.affString + \" \", \"goldenrod\", \"\",\n        diffh + \" \", vars.diffhcolor, \"\",\n        diffm + \" \", vars.diffmcolor, \"\"\n    );\n};\n\nclient.prompt.vars = {\n    blackout: false,\n    h: \"0\",\n    m: \"0\",\n    e: \"0\",\n    w: \"0\",\n    hcolor: \"green\",\n    mcolor: \"green\",\n    ecolor: \"green\",\n    wcolor: \"green\",\n    xp: \"0\",\n    maxh: \"0\",\n    maxm: \"0\",\n    maxe: \"0\",\n    maxw: \"0\",\n    ph: \"100%\",\n    pm: \"100%\",\n    pe: \"100%\",\n    pw: \"100%\",\n    diffh: \"\",\n    diffm: \"\",\n    diffhcolor: \"green\",\n    diffmcolor: \"green\",\n    eq: \"\",\n    bal: \"\",\n    c: \"\",\n    k: \"\",\n    d: \"\",\n    b: \"\",\n    affs: {},\n    affString: \"\",\n    retard: \"\",\n    aeon: \"\",\n    stance: \"\",\n    skullFracs: \"0\",\n    torsoFracs: \"0\",\n    wristFracs: \"0\",\n    legFracs: \"0\",\n    parrying: \"Z\",\n    parrycolor: \"grey\",\n};\n\nclient.prompt.affAbbrev = {\n    addiction: 'add',\n    aeon: 'ae',\n    agoraphobia: 'agor',\n    airdisrupt: 'adsr',\n    amnesia: 'amn',\n    anorexia: 'ano',\n    asleep: 'asl',\n    asthma: 'ast',\n    blackout: 'bo',\n    blindness: 'unb',\n    bound: 'bnd',\n    brokenleftarm: 'la1',\n    brokenleftleg: 'll1',\n    brokenrightarm: 'ra1',\n    brokenrightleg: 'rl1',\n    bruisedribs: 'ribs',\n    \"burning (1)\": 'burn',\n    charredburn: '4burn',\n    claustrophobia: 'clau',\n    clumsiness: 'cl',\n    confusion: 'con',\n    corruption: 'corr',\n    crackedribs: 'cr',\n    damagedleftarm: 'la2',\n    damagedleftleg: 'll2',\n    damagedrightarm: 'ra2',\n    damagedrightleg: 'rl2',\n    damagedhead: 'hd2',\n    darkshade: 'dark',\n    dazed: 'dzd',\n    deadening: 'dea',\n    deafness: 'und',\n    dehydrated: 'deh',\n    dementia: 'dem',\n    disloyalty: 'disl',\n    disrupted: 'disr',\n    dissonance: 'disso',\n    dizziness: 'diz',\n    earthdisrupt: 'edsr',\n    entangled: 'entgl',\n    epilepsy: 'epi',\n    extremeburn: '3burn',\n    fear: 'fear',\n    firedisrupt: 'fdsr',\n    frozen: 'frz',\n    generosity: 'gen',\n    haemophilia: 'haem',\n    hallucinations: 'hall',\n    hamstrung: 'hms',\n    healthleech: 'hthl',\n    heartseed: 'heart',\n    hellsight: 'hell',\n    hypersomnia: 'hypers',\n    hypochondria: 'hypoch',\n    hypothermia: 'hypoth',\n    icefist: 'ice',\n    impaled: 'impl',\n    impatience: 'impat',\n    itching: 'itch',\n    justice: 'just',\n    laceratedthroat: 'lac2',\n    lethargy: 'let',\n    loneliness: 'lon',\n    lovers: 'love',\n    insulation: 'cal',\n    whisperingmadness: 'mad',\n    mangledleftarm: 'la3',\n    mangledleftleg: 'll3',\n    mangledrightarm: 'ra3',\n    mangledrightleg: 'rl3',\n    mangledhead: 'hd3',\n    masochism: 'maso',\n    meltingburn: '5burn',\n    mildtrauma: 'tor1',\n    nausea: 'nau',\n    slimeobscure: 'nkh',\n    numbedleftarm: 'nbla',\n    numbedrightarm: 'nbra',\n    pacified: 'pac',\n    paralysis: 'par',\n    paranoia: 'prn',\n    peace: 'pea',\n    phlogistication: 'phlog',\n    pinshot: 'psh',\n    prone: 'pr',\n    recklessness: 'reck',\n    retardation: 'ret',\n    roped: 'rop',\n    sanguinehumour: 'sanH',\n    scalded: 'scald',\n    scytherus: 'scy',\n    selarnia: 'sel',\n    sensitivity: 'sen',\n    serioustrauma: 'tor2',\n    severeburn: '2burn',\n    shivering: 'shiv',\n    shyness: 'shy',\n    skullfractures: 'sf',\n    slashedthroat: 'lac1',\n    sleeping: 'slp',\n    slickness: 'sli',\n    spiritdisrupt: 'sdsr',\n    stain: 'sta',\n    stupidity: 'st',\n    stuttering: 'stut',\n    homunculusmercury: 'merc',\n    temperedcholeric: 'choH',\n    temperedmelancholic: 'melaH',\n    temperedphlegmatic: 'phleH',\n    temperedsanguine: 'sanH',\n    timeflux: 'tmfx',\n    torntendons: 'tt',\n    transfixation: 'trfx',\n    vertigo: 'vert',\n    vitrification: 'vitri',\n    voidfist: 'void',\n    voyria: 'voy',\n    waterdisrupt: 'wdsr',\n    weariness: 'wea',\n    webbed: 'web',\n    wristfractures: 'wf'\n};\n\nclient.prompt.colorPercentage = function(perc) {\n    return perc > 75 ? 'limegreen' : (perc >= 33 ? 'yellow' : 'red');\n};\n\nlet setPromptAffs = function() {\n    for (let aff in GMCP.Afflictions) {\n        if (aff != \"deafness\" && aff != \"blindness\" && aff != \"insomnia\") {\n            client.prompt.vars.affString += client.prompt.affAbbrev[aff]+\" \";\n        }\n    }\n    if (client.prompt.vars.affString != \"\") {\n        client.prompt.vars.affString = '['+client.prompt.vars.affString+']';\n    }\n};\n\nclient.setPromptVitals = function(vitals) {\n    let vars = client.prompt.vars;\n    if (vitals.hp - vars.h != 0)\n    \tsetHealthDiffPrompt(vitals.hp - vars.h);\n    if (vitals.mp - vars.m != 0)\n\t    setManaDiffPrompt(vitals.mp - vars.m);\n    vars.h = vitals.hp;\n    vars.m = vitals.mp;\n    vars.e = vitals.ep;\n    vars.w = vitals.wp;\n    vars.maxh = vitals.maxhp;\n    vars.maxm = vitals.maxmp;\n    vars.maxe = vitals.maxep;\n    vars.maxw = vitals.maxwp;\n    vars.bal = vitals.bal;\n    vars.eq = vitals.eq;\n\n    let perch = vitals.hp*100/vitals.maxhp;\n    let percm = vitals.mp*100/vitals.maxmp;\n    let perce = vitals.ep*100/vitals.maxep;\n    let percw = vitals.wp*100/vitals.maxwp;\n    \n    vars.hcolor = client.prompt.colorPercentage(perch);\n    vars.mcolor = client.prompt.colorPercentage(percm);\n    vars.ecolor = client.prompt.colorPercentage(perce);\n    vars.wcolor = client.prompt.colorPercentage(percw);\n\n    vars.ph = perch.toFixed(1)+\"%\";\n    vars.pm = percm.toFixed(1)+\"%\";\n    vars.pe = perce.toFixed(1)+\"%\";\n    vars.pw = percw.toFixed(1)+\"%\";\n};\n\nlet setPromptDefs = function(args) {\n    client.prompt.vars.c = GMCP.Defences.hasOwnProperty('cloak') ? \"c\" : \"\";\n    client.prompt.vars.k = GMCP.Defences.hasOwnProperty('kola') ? \"k\" : \"\";\n    client.prompt.vars.d = GMCP.Defences.hasOwnProperty('deafness') ? \"d\" : \"\";\n    client.prompt.vars.b = GMCP.Defences.hasOwnProperty('blindness') ? \"b\" : \"\";\n};\n\nlet setPromptBals = function(args) {\n    client.prompt.vars.eq = client.prompt.vars.eq == \"1\" ? \"e\" : \"\";\n    client.prompt.vars.bal = client.prompt.vars.bal == \"1\" ? \"x\" : \"\";\n};\n\nlet setHealthDiffPrompt = function(args) {\n    client.prompt.vars.diffh = args < 0 ? \"(\"+args+\")\" : \"(+\"+args+\")\";\n    client.prompt.vars.diffhcolor = args < 0 ? \"red\" : \"green\";\n};\n\nlet setManaDiffPrompt = function(args) {\n    client.prompt.vars.diffm = args < 0 ? \"(\"+args+\")\" : \"(+\"+args+\")\";\n    client.prompt.vars.diffmcolor = \"blue\"; //args.diff < 0 ? \"red\" : \"green\";\n};\n\nlet fractureColours = function(args) {\n    let fracPromptColour = \"\";\n    if (args == 0)\n        fracPromptColour = \"grey\";\n    else if (args <= 2)\n        fracPromptColour = \"peachpuff\";\n    else if (args <= 4)\n        fracPromptColour = \"yellow\";\n    else\n        fracPromptColour = \"red\";\n    return fracPromptColour;\n}"},{"type":"function","name":"def/aff got/lost","enabled":true,"id":22,"code":"//Enter the function here\ndefGotEcho = function(defence) {\n    client.display_notice(\n        \" +DEF \", \"fuchsia\", \"\",\n        defence, \"lime\", \"\"\n        );\n};\n\ndefLostEcho = function(defence) {\n    client.display_notice(\n        \" -DEF \", \"fuchsia\", \"\",\n        defence, \"red\", \"\"\n        );\n};\n\naffGotEcho = function(affliction) {\n    client.display_notice(\n        \" +AFF \", \"orange\", \"\",\n        affliction, \"lime\", \"\"\n        );\n};\n\naffLostEcho = function(affliction) {\n    client.display_notice(\n        \" -AFF \", \"orange\", \"\",\n        affliction, \"red\", \"\"\n        );\n};"}]}